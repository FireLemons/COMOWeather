#!/bin/bash

copied_files=("configMaker" "materialize" "vue" "WeatherBotBackground")
warning_files=("assets" "build" "configMaker.css" "gitignore" "shared" "theme")
ignored_files=("about" "configMaker" "favicon" "git_hooks" "gitmodules" "index" "jupstorm" "leaves" "nav" "nojs" "package" "snowy" "sunny-skies" "update-standalone")

if [[ $1 == "-a" || $1 == "--all" ]];then
  changed_files=($(git ls-tree -r master --name-only))
else
  changed_files=($(git diff --name-only HEAD HEAD~1))
fi

# Manually set the changed files for Testing
#changed_files=("js/vue.min.js" "materialize/css/materialize.min.css" "configMaker" "css/nojs.css" "js/configMaker.js")

# Checks if a string contains a substring from an array
#   @param   string  The string to examine for substrings
#   @param   array   The array of substrings
#   @outputs string "true" if an element of $2 was found to be a substring of $1 "false" otherwise
#   @return  1 on missing param 0 on success
matches_list () {
  local matchString=$1
  local -n substrings=$2

  if [ -z $matchString ];then
    echo "missing param string to be checked"
    return 1
  fi

  if [ -z $substrings ];then
    echo "missing param array of substrings"
    return 1
  fi

  for substring in "${substrings[@]}"; do
    if [[ $matchString == *"$substring"* ]]; then
      echo true
      return 0
    fi
  done

  echo false
  return 0
}

cd configMaker

git checkout standalone

possibleFileChanges=false
buildScriptChanged=false

for file in "${changed_files[@]}"; do
  if ! matchesList=$(matches_list $file warning_files); then
    echo "ERROR: $matchesList"
  elif [[ $matchesList = true ]]; then
    echo "WARNING: changed shared file $file"
    possibleFileChanges=true
  elif ! matchesList=$(matches_list $file copied_files); then
    echo "ERROR: $matchesList"
  elif [[ $matchesList = true && $file != "configMaker" ]]; then
    cp "../$file" $file
    echo "INFO: Copied $file to configMaker/$file"
  elif ! matchesList=$(matches_list $file ignored_files); then
    echo "ERROR: $matchesList"
  elif [[ $matchesList = true ]]; then
    echo "INFO: ignored $file"
  else
    echo "WARNING: $file has no update policy"
    possibleFileChanges=true
  fi

  if [[ $file = "build.js" ]];then
    buildScriptChanged=true
  fi
done

if [[ $buildScriptChanged = false ]];then
  echo "INFO: $(node templates/build.js)"
else
  echo "WARNING: Skipping building configMaker via templates/build.js because of changed web page build.js"
fi

if [[ "$(git status)" == *"not staged for commit"* ]]; then
  possibleFileChanges=true
fi

if [[ $possibleFileChanges = false ]]; then
  git checkout master
else
  echo ""
  echo "WARNING: Files possibly changed. Staying on branch standalone."
fi

exit 0
